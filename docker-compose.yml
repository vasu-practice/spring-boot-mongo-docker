#we have here 1 is front-end-application service and 2nd one db containser service so 2 services.
version: "3.5"
services:
  springapp:   # spring app frontend container or service name
    image: vasudockerhubacc/spring-boot-mongo:1  # image of spring-boot-mongo:1
    depends_on: # why because this depends_on is using here 2 apps is there 1 is frontendapp 2nd backend app.so backend app should start first only then only frontent app run.
    - mongo      #backend app container name/image name
    ports:                   # port forwarding here
    - 8080:8080
    environment:             # setting env varables to connect database application
    - MONGO_DB_HOSTNAME=mongo
    - MONGO_DB_USERNAME=vasu
    - MONGO_DB_PASSWORD=vasu123
    networks:
    - springappoverlay # now using for dockerswarm
    deploy:  # This will be considered in only in swarm. if u want more containers then we deploy mode option 
      replicas:2                                                          # - springappnetwork used for docker compose for bridge n/w
      update_config:    # for rolling updates even for without down time we use rolling update concept. if we are updating image version 1 to 2 then if u this there is no downtime.
        parallelism: 1  # it will remove 1 old container and it will wait for 20s to create 1 new conatiner.
        delay: 20s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
 
 # note here for database container i did not mention deploy mode option means (replicas:2) like this.So it will create only 1 replica by default.
 # mongo db container creation:
 #-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 mongo:      # here creating mongo database application container
    image: mongo
    environment:
    - MONGO_INITDB_ROOT_USERNAME=vasu        #setting env variabes to login into db
    - MONGO_INITDB_ROOT_PASSWORD=vasu123
    volumes:                # creating volumes for storing container data from db
    - mongovol:/data/db     # db container data mounting to /data/bd folder
    networks:               # assining network for db container for communication
    - springappoverlay
    #- springappnetwork
volumes:              # in this section whatever volumes we are using we need to define here
    mongovol:
         # driver: local is default driver
networks:             # in this section whatever networks we are using we need to define here
    springappoverlay: # now using for dockerswarm (overlay n/w is default network)
   #springappnetwork:
        # bridge is default network driver


